@inject IJSRuntime JSRuntime
@implements IAsyncDisposable

<div class="chart-container">
    <h3>@Title</h3>
    <div class="pie-chart-wrapper">
        <canvas id="@CanvasId"></canvas>
    </div>
</div>

@code {
    [Parameter] public string Title { get; set; } = "Pie Chart";
    [Parameter] public Dictionary<string, double> Data { get; set; } = new();

    private string CanvasId = Guid.NewGuid().ToString();
    private bool _chartInitialized = false;

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await InitializeChart();
        }
    }

    private async Task InitializeChart()
    {
        // Add sample data if no data provided
        if (!Data.Any())
        {
            Data = new Dictionary<string, double>
            {
                { "Desktop", 45 },
                { "Mobile", 35 },
                { "Tablet", 20 }
            };
        }

        var labels = Data.Keys.ToArray();
        var values = Data.Values.ToArray();

        try
        {
            var config = await JSRuntime.InvokeAsync<object>("chartHelper.getPieChartConfig", 
                labels, values, null);
            
            _chartInitialized = await JSRuntime.InvokeAsync<bool>("chartHelper.createChart", CanvasId, config);
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error initializing chart: {ex.Message}");
        }
    }

    public async Task UpdateChart(Dictionary<string, double> newData)
    {
        Data = newData;
        
        if (_chartInitialized)
        {
            var labels = Data.Keys.ToArray();
            var values = Data.Values.ToArray();

            try
            {
                var config = await JSRuntime.InvokeAsync<object>("chartHelper.getPieChartConfig", 
                    labels, values, null);
                
                await JSRuntime.InvokeVoidAsync("chartHelper.updateChart", CanvasId, config);
            }
            catch (Exception ex)
            {
                Console.WriteLine($"Error updating chart: {ex.Message}");
            }
        }
    }

    public async ValueTask DisposeAsync()
    {
        if (_chartInitialized)
        {
            try
            {
                await JSRuntime.InvokeVoidAsync("chartHelper.destroyChart", CanvasId);
            }
            catch (Exception ex)
            {
                Console.WriteLine($"Error disposing chart: {ex.Message}");
            }
        }
    }
}

<style>
    .chart-container {
        padding: 20px;
        margin: 20px 0;
        border: 1px solid #ddd;
        border-radius: 8px;
        background-color: #fff;
    }

    .chart-container h3 {
        margin-bottom: 15px;
        color: #333;
        text-align: center;
    }

    .pie-chart-wrapper {
        position: relative;
        height: 450px;
        width: 100%;
        display: flex;
        justify-content: center;
        align-items: center;
        padding: 20px;
    }

    .chart-container canvas {
        max-width: 300px !important;
        max-height: 300px !important;
        width: auto !important;
        height: auto !important;
    }
</style>
