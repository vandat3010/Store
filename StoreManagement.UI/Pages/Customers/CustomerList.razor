@page "/customers"  
@using StoreManagement.UI.Models  
@using StoreManagement.UI.Models.DTOs
@using StoreManagement.UI.Models.Entities  
@using StoreManagement.UI.Services  
@using StoreManagement.UI.Services.Interfaces
@inject NavigationManager Nav

<h1 class="mb-3">Customer List</h1>  
<button class="btn btn-success mb-3 me-2" @onclick="@(() => Nav.NavigateTo("/customers/add"))">
    <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" fill="currentColor" class="bi bi-person-add" viewBox="0 0 16 16">  
        <path d="M12.5 16a3.5 3.5 0 1 0 0-7 3.5 3.5 0 0 0 0 7m.5-5v1h1a.5.5 0 0 1 0 1h-1v1a.5.5 0 0 1-1 0v-1h-1a.5.5 0 0 1 0-1h1v-1a.5.5 0 0 1 1 0m-2-6a3 3 0 1 1-6 0 3 3 0 0 1 6 0M8 7a2 2 0 1 0 0-4 2 2 0 0 0 0 4" />  
        <path d="M8.256 14a4.5 4.5 0 0 1-.229-1.004H3c.001-.246.154-.986.832-1.664C4.484 10.68 5.711 10 8 10q.39 0 .74.025c.226-.341.496-.65.804-.918Q8.844 9.002 8 9c-5 0-6 3-6 4s1 1 1 1z" />  
    </svg> Add Customer  
</button>  

<div class="row mb-3">
    <div class="col-md-3">
        <input class="form-control" placeholder="Search by name..." @bind="keyword" @bind:event="oninput" />
    </div>
    <div class="col-md-2">
        <select class="form-select" @bind="pageSize">
            <option value="5">5</option>
            <option value="10">10</option>
            <option value="20">20</option>
        </select>
    </div>
    <div class="col-md-2">
        <button class="btn btn-primary w-100" @onclick="SearchCustomers">Search</button>
    </div>
</div>
@if (customers == null)  
{  
    <p><em>Loading...</em></p>  
}  
else if (customers.Count == 0)  
{  
    <p>No customers found.</p>  
}  
else  
{  
    <table class="table">  
        <thead>  
            <tr>  
                <th>STT</th>  
                <th>Name</th>  
                <th>Address</th>  
                <th>Phone</th>  
                <th>Created Date</th> 
                <th>#</th>
            </tr>  
        </thead>  
        <tbody>
            @{
                int stt = (currentPage - 1) * pageSize + 1;
            }
            @foreach (var customer in customers)
            {  
                <tr>
                    <td>@stt</td>
                    <td>@customer.Name</td>  
                    <td>@customer.Address</td>  
                    <td>@customer.Phone</td>  
                    <td>@customer.CreatedDate.ToString("dd/MM/yyyy")</td>  
                    <td>
                        <button class="btn btn-primary btn-sm" @onclick="() => Edit(customer.Id)">
                            <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" fill="currentColor" class="bi bi-pen" viewBox="0 0 16 16">  
                                <path d="m13.498.795.149-.149a1.207 1.207 0 1 1 1.707 1.708l-.149.148a1.5 1.5 0 0 1-.059 2.059L4.854 14.854a.5.5 0 0 1-.233.131l-4 1a.5.5 0 0 1-.606-.606l1-4a.5.5 0 0 1 .131-.232l9.642-9.642a.5.5 0 0 0-.642.056L6.854 4.854a.5.5 0 1 1-.708-.708L9.44.854A1.5 1.5 0 0 1 11.5.796a1.5 1.5 0 0 1 1.998-.001m-.644.766a.5.5 0 0 0-.707 0L1.95 11.756l-.764 3.057 3.057-.764L14.44 3.854a.5.5 0 0 0 0-.708z" />  
                            </svg> Edit  
                        </button>
                        <button class="btn btn-danger btn-sm" @onclick="() => DeleteAsync(customer.Id)">
                            <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" fill="currentColor" class="bi bi-trash3" viewBox="0 0 16 16">  
                                <path d="M6.5 1h3a.5.5 0 0 1 .5.5v1H6v-1a.5.5 0 0 1 .5-.5M11 2.5v-1A1.5 1.5 0 0 0 9.5 0h-3A1.5 1.5 0 0 0 5 1.5v1H1.5a.5.5 0 0 0 0 1h.538l.853 10.66A2 2 0 0 0 4.885 16h6.23a2 2 0 0 0 1.994-1.84l.853-10.66h.538a.5.5 0 0 0 0-1zm1.958 1-.846 10.58a1 1 0 0 1-.997.92h-6.23a1 1 0 0 1-.997-.92L3.042 3.5zm-7.487 1a.5.5 0 0 1 .528.47l.5 8.5a.5.5 0 0 1-.998.06L5 5.03a.5.5 0 0 1 .47-.53Zm5.058 0a.5.5 0 0 1 .47.53l-.5 8.5a.5.5 0 1 1-.998-.06l.5-8.5a.5.5 0 0 1 .528-.47M8 4.5a.5.5 0 0 1 .5.5v8.5a.5.5 0 0 1-1 0V5a.5.5 0 0 1 .5-.5" />  
                            </svg> Delete  
                        </button>  
                    </td> 
                    
                </tr>
                stt++;
            }  
        </tbody>  
    </table>
    <div class="d-flex justify-content-between">
        <div>Total: @totalItems items</div>
        <div>
            <button class="btn btn-sm btn-outline-primary me-1" @onclick="PreviousPage" disabled="@(!CanPrevious)">Previous</button>
            <span>Page @currentPage / @TotalPages</span>
            <button class="btn btn-sm btn-outline-primary ms-1" @onclick="NextPage" disabled="@(!CanNext)">Next</button>
        </div>
    </div>
}  

@inject ICustomerService CustomerService  

@code {  
    private List<CustomerDto>? customers;  
    private string keyword = string.Empty;
    private int currentPage = 1;
    private int pageSize = 10;
    private int totalItems;

    private int TotalPages => (int)Math.Ceiling((double)totalItems / pageSize);
    private bool CanPrevious => currentPage > 1;
    private bool CanNext => currentPage < TotalPages;
    protected override async Task OnInitializedAsync()
    {
        await SearchCustomers();
    }

    private async Task SearchCustomers()
    {
        var request = new SearchRequest
        {
            Keyword = keyword,
            Page = currentPage,
            Size = pageSize
        };

        try
        {
            var result = await CustomerService.SearchAsync(request);
            customers = result.Items;
            totalItems = result.Total;
        }
        catch (Exception ex)
        {
            Console.Error.WriteLine($"Error fetching customers: {ex.Message}");
        }
    }

    private void Edit(int id)
    {
        Nav.NavigateTo($"/customers/edit/{id}");
    }
    
    private async Task NextPage()
    {
        if (CanNext)
        {
            currentPage++;
            await SearchCustomers();
        }
    }

    private async Task PreviousPage()
    {
        if (CanPrevious)
        {
            currentPage--;
            await SearchCustomers();
        }
    }

    private async Task DeleteAsync(int id)
    {
        var confirmed = await JS.InvokeAsync<bool>("confirm", $"Are you sure you want to delete customer with ID = {id}?");
        if (!confirmed)
            return;

        try
        {
            var success = await CustomerService.DeleteAsync(id);
            if (success)
            {
                await SearchCustomers(); 
            }
            else
            {
                Console.Error.WriteLine($"Delete failed for ID = {id}");
            }
        }
        catch (Exception ex)
        {
            Console.Error.WriteLine($"Error deleting customer: {ex.Message}");
        }
    }

    [Inject]  
    private IJSRuntime JS { get; set; } = default!;  
}
